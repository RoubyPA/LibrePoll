#!@GUILE@ --no-auto-compile
-*- mode: scheme -*-
!#
;;; LibrePoll -- Free opinion poll service.
;;;
;;; Copyright (C) 2019 Pierre-Antoine Rouby <contact@parouby.fr>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Affero General Public License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(use-modules (ice-9 match)
             (ice-9 regex)
             (ice-9 popen)
             (ice-9 rdelim)
             ((ice-9 format) #:prefix icef:)
             (srfi srfi-1)
             (srfi srfi-28)
             (srfi srfi-11)
             (rnrs sorting)
             ;; Html & Markdown
             (sxml simple)
             (commonmark)
             ;; Web
             (rnrs bytevectors)
             (web request)
             (web server)
             (web uri)
             ;; DataBase
             (sqlite3)
             ;; Json
             (json))

;;;
;;; Usage
;;;

(define (using)
  (display (format "Usage: ~a [CONFIG]\n" (car (command-line))))
  (exit -1))

(define (abort-with-msg msg)
  (display (format "Error: ~a\n" msg))
  (exit -1))

;;; Help
(if (or (string= "--help" (car (last-pair (command-line))))
        (string= "-h" (car (last-pair (command-line)))))
    (using))

;;;
;;; String tools
;;;

(define (substitute str old new)
  "Replace OLD with NEW in STR."
  (let ((vstr (string-match old str)))
    (if (not (equal? vstr #f))
        (match (vector-ref vstr 1)
          ((s . e)
           (substitute (string-replace str new s e)
                       old new))
          (x
           (throw 'substitute-error '(str old new))))
        str)))

(define (sxml->xml-string sxml)
  (call-with-output-string
    (lambda (port)
      (sxml->xml sxml port))))

;;;
;;; Configuration
;;;

(define share-path
  (let ((dir (getenv "LIBREPOLL_ASSETS_DIR")))
    (if (string? dir)
        dir
        "")))

(define (file-content path)
  "Returns PATH file-content as string."
  (define (aux port)
    (let ((line (read-line port)))
      (if (string? line)
          (string-append line (aux port))
          "")))

  (let* ((port (open-input-file path))
         (file (aux port)))
    (close-port port)
    file))

(define conf
  (let ((conf-file (if (>= (length (command-line)) 2)
                       (car (last-pair (command-line)))
                       "librepoll.json")))
    (if (file-exists? conf-file)
        (let ((json (file-content conf-file)))
          (json-string->scm json))
        (abort-with-msg "No config file"))))

(define (conf-ref conf key)
  "Use 'hash-ref' if CONF is hash-table, else 'assoc-ref'."
  (cond
   ((hash-table? conf)
    (hash-ref conf key))
   (else
    (assoc-ref conf key))))

(define DB-FILE  (conf-ref conf "db"))
(define HOST     (conf-ref conf "host"))
(define PORT     (conf-ref conf "port"))
(define SECURITY (conf-ref conf "security"))
(define API      (string= (conf-ref conf "api") "true"))
(define UI       (string= (conf-ref conf "ui")  "true"))
(define LOG-FILE (conf-ref conf "log"))
(define STDOUT   (string= (conf-ref conf "stdout") "true"))
(define TITLE    (conf-ref conf "title"))
(define THEME    (conf-ref conf "theme"))
(define COMMENT  (conf-ref conf "comment"))

;;;
;;; Log
;;;

(define log
  (let ((lfile
         (let ((port (open-output-file LOG-FILE)))
           (lambda (message)
             (let ((lines (string-split message #\newline)))
               (map  (lambda (l)
                       (write-line
                        (format "~a librepoll: ~a"
                                (strftime "%b %d %H:%M:%S"
                                          (localtime (current-time)))
                                l)
                        port))
                     lines))))))
    (if STDOUT
        (lambda (message)
          (display (format "~a\n" message))
          (lfile message))
        lfile)))

;;;
;;; DB file
;;;

(define (create-db db file)
  (define (sql-request sql)
    (log (format "createdb: ~a" sql))
    (let ((stmt (sqlite-prepare db sql)))
        (sqlite-fold cons '() stmt)))

  (sql-request
   "CREATE TABLE IF NOT EXISTS poll (
     id INTEGER PRIMARY KEY,
     name CHARACTER(50) NOT NULL,
     description TEXT,
     creation_date TIME NOT NULL
   );")

  (sql-request
   "CREATE TABLE IF NOT EXISTS option (
     id INTEGER PRIMARY KEY,
     poll INTEGER NOT NULL,
     name VARCHAR(64) NOT NULL,
     FOREIGN KEY(poll) REFERENCES poll(id)
   );")

  (sql-request
   "CREATE TABLE IF NOT EXISTS vote (
     id INTEGER PRIMARY KEY,
     date TIME NOT NULL,
     poll INTEGER NOT NULL,
     option INTEGER NOT NULL,
     metadata TEXT NOT NULL,
     FOREIGN KEY(option) REFERENCES option(id),
     FOREIGN KEY(poll) REFERENCES poll(id)
   );")

  (sql-request
   (format "INSERT INTO poll (id,name,description,creation_date)
     VALUES (
       1,
       'Do you like this software ?',
       '~a',
       DATETIME('now') );"
           "This program is free software, licensed under
[AGPL](http://www.gnu.org/licenses/).

```
This program is free software: you can redistribute it and/or
modify it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public
License along with this program.  If not, see
<http://www.gnu.org/licenses/>.
```
"))

  (sql-request
   "INSERT INTO option (poll,name)
     VALUES (1, 'Yes');")

  (sql-request
   "INSERT INTO option (poll,name)
     VALUES (1, 'Non');"))

(define default-db
  (let* ((file  DB-FILE)
         (file? (file-exists? file))
         (db    (sqlite-open  file)))
    (cond
     (file? db)
     (else
      (let ((ok (create-db db file)))
        db)))))

;;;
;;; Syntax
;;;

(define-syntax-rule (define-sql-request name DOCSTRING parser sql)
  "Create new procedure named NAME. If PARSER is a procedure,
wrap the defaut returns, else do nothing. SQL is sql request in string
format."
  (define* (name #:optional (args '()))
    DOCSTRING
    (let* ((core (if (null-list? args)
                     (lambda ()
                       (log (format "sql: ~a" sql))
                       (exec-sql->list default-db sql))
                     (lambda ()
                       (let* ((l (map (lambda (s)
                                         (if (string? s)
                                             (substitute s "'"
                                                         "&apos;")
                                             s))
                                      args))
                              (str (apply format (cons sql l))))
                         (log (format "sql: ~a" str))
                         (exec-sql->list default-db str)))))
           ;; Wrap core with parser if parser is define.
           (exec (cond
                  ((procedure? parser)
                   (lambda ()
                     (parser (core))))
                  (else
                   core))))
      (exec))))

;;;
;;; Tools
;;;

(define (decode-post-uri-body body)
  "Decode and split BODY in uri format. Return list of alist."
  (map (lambda (l)
         (car (acons (list-ref l 0) (uri-decode (list-ref l 1)) '())))
       (map (lambda (s)
              (string-split s #\=))
            (string-split (utf8->string body) #\&))))

(define (percent num total)
  (cond
   ((zero? total) 0)
   (else
    (let ((cur (* (/ num total) 100.0)))
      (/ (round (* cur 100)) 100.0)))))

(define (random-number)
  (random (+ (vector-ref (times) 0)
             (vector-ref (times) 1))))

(define (exec-sql->list db sql)
  (define (vector-list->list vl)
    (cond
     ((vector? vl) (vector->list vl))
     ((list? vl)   (map vector->list vl))
     (else #f)))

  (let ((stmt (sqlite-prepare db sql)))
    (vector-list->list (sqlite-fold cons '() stmt))))

;;;
;;; SQL request
;;;

(define-sql-request
  sql-vote-count
  "Returns number of all vote in db."
  (lambda (l) (caar l))
  "SELECT COUNT(*) FROM vote;")

(define-sql-request
  sql-poll-count
  "Returns number of all poll in db."
  (lambda (l) (caar l))
  "SELECT COUNT(*) FROM poll;")

(define-sql-request
  sql-vote-number-by-poll
  "Count all vote for poll."
  (lambda (l) (caar l))
  "SELECT COUNT(*) FROM vote WHERE poll = ~a;")

(define-sql-request
  sql-polls
  "Returns list of all poll in db."
  'nil
  "SELECT id,name,description FROM poll;")

(define-sql-request
  sql-poll-by-id
  "Returns poll coresponding to ID in db."
  (lambda (l) (car l))
  "SELECT name,description FROM poll WHERE id = ~a;")

(define-sql-request
  sql-poll-by-name
  "Returns poll id."
  (lambda (l) (caar l))
  "SELECT id FROM poll WHERE name = ~s;")

(define-sql-request
  sql-options-for-poll
  "Returns list contain poll for first element of list."
  (lambda (l) (reverse l))
  "SELECT id,name FROM option WHERE poll = ~a;")

(define-sql-request
  sql-vote-for-poll
  "Returns list of all vote for poll."
  'nil
  "SELECT id,option,date,metadata FROM vote WHERE poll = ~a;")

(define-sql-request
  sql-vote-num-for-option
  "Returns count of vote for poll."
  (lambda (l) (caar l))
  "SELECT COUNT(*) FROM vote WHERE vote.option = ~a;")

(define-sql-request
  sql-vote-exist?
  "Returns true if vote already exists."
  (lambda (l) (not (zero? (caar l))))
  "SELECT COUNT(*) FROM vote
     WHERE vote.poll = ~a AND
           vote.metadata = ~s;")

(define-sql-request
  sql-vote
  "Insert new vote in db."
  'nil
  "INSERT INTO vote (date, poll, option, metadata)
     VALUES (DATETIME('now'), ~a, ~a, ~s);")

(define-sql-request
  sql-create-poll
  "Insert new poll in db."
  'nil
  "INSERT INTO poll (name,description,creation_date)
     VALUES(~s, '~a' ,DATETIME('now'));")

(define-sql-request
  sql-create-option-for-poll
  "Insert new poll option in db."
  'nil
  "INSERT INTO option (poll,name)
     VALUES(~s, ~s);")


;;;
;;; Pie chart
;;;

(define PI 3.141592653589793)

(define (percentage->coordinate percent)
  "Percentage PERCENT to coordinate '(x y)."
  (let* ((var (* 2 PI percent))
         (x (cos var))
         (y (sin var)))
    `(,x ,y)))

(define (svg-line x1 y1 percent color)
  (match (percentage->coordinate percent)
    ((x y)
     `((line (@ (x1 ,x1) (y1 ,y1)
                (x2 ,(+ x1 x)) (y2 ,(+ y1 y))
                (stroke-width "0.05")
                (fill "transparent")
                (stroke ,color)))))))

(define (svg-path x1 y1 x2 y2 c p)
  `((path (@ (d ,(icef:format #f "M ~5f ~5f A 1 1 0 ~a 1 ~5f ~5f L 0 0"
                              (number->string x1)
                              (number->string y1)
                              (if (> p 0.5) 1 0)
                              (number->string x2)
                              (number->string y2)))
             (id ,(format "svg_path_~a" c))))))

(define (make-paths x1 y1 p accp c acc)
  (match p
    (() acc)
    ((a . rest)
     (match (percentage->coordinate (+ a accp))
       ((x2 y2)
        (let ((acc (cons (svg-path x1 y1 x2 y2 c a) acc)))
          (make-paths x2 y2 rest (+ a accp)
                      (+ 1 c) acc)))))))
(define make-circle
  `((circle (@ (cx "0")
               (cy "0")
               (r  "1")
               (id "svg_path_0")))))

(define (make-pie-chart percent-lst)
  "Make sxml svg pie chart from list of precentage PRENCET-LST between 0 and
1."
  `((svg (@ (width "200px")
            (height "200px")
            (viewBox "-1 -1 2 2")
            (style "transform: rotate(-0.25turn)")
            (xmlns "http://www.w3.org/2000/svg")
            (xmlns "http://www.w3.org/1999/xlink"))
         ,(if (= (length percent-lst) 1)
              make-circle
              (make-paths 1 0 percent-lst 0 0 '())))))

;;;
;;; Render
;;;

(define (sxml->html sxml)
  (let ((page `((html
                 (head
                  (meta (@ (charset "utf-8")))
                  (title ,TITLE)
                  (link (@ (rel "stylesheet")
                           (href ,(string-append "/assets/" THEME "/main.css")))))
                 (body
                  ,sxml
                  (footer
                   (strong "LibrePoll")
                   (br)
                   "License: "
                   (a (@ (href
                          "https://www.gnu.org/licenses/agpl-3.0.txt"))
                      "AGPL")
                   (br)
                   "Source code: "
                   (a (@ (href
                          "https://framagit.org/prouby/librepoll"))
                      "Framagit")
                   (br)))))))
    (let ((html (call-with-output-string
                  (lambda (port)
                    (sxml->xml page port)))))
      html)))

(define (poll-info id)
  (let* ((poll (sql-poll-by-id `(,id)))
         (name (list-ref poll 0))
         (desc (list-ref poll 1)))
    (values name desc)))

(define (render-page-index)
  (if (file-exists? "index.html")
      (file-content "index.html")
      (sxml->html `((header
                     (h1 "Welcome in LibrePoll !"))
                    (div (@ (class "core"))
                         (div (@ (class "description"))
                              ,(commonmark->sxml COMMENT))
                         (h2 "Create new poll")
                         (ul
                          (li (a (@ (href ,(string-append HOST "/create")))
                                 "Click here")))
                         (h2 "Statistique")
                         (p "There are " (strong ,(sql-vote-count) " votes")
                            " on this instance." (br)
                            "There are " (strong ,(sql-poll-count) " polls")
                            " on this instance."))))))

(define (render-page-create-poll-get)
  (sxml->html `((header (h1 "Create new poll"))
                (div (@ (class "core"))
                     (form
                      (@ (action "/create")
                         (method "post"))
                      (table (tr (td
                                  "Name" (br)
                                  (input (@ (type "text")
                                            (name "name")))))
                             (tr (td
                                  "Description" (br)
                                  (textarea (@ (name "description")
                                               (rows "24"))
                                            "")))
                             (tr (td (input (@ (type "submit")
                                               (value "Submit")))))))))))

(define (render-page-add-option poll)
  (let ((options (sql-options-for-poll `(,poll))))
    (sxml->html
     `((header (h1 "Add options"))
       (div (@ (class "core"))
            ,(map (lambda (l) `(div (@ (class "option"))
                                    ,(substitute (cadr l) "&apos;"
                                                 "'")))
                  options)
            (form
             (@ (action ,(string-append "/add_option/" poll))
                (method "post"))
             (table (tr
                     (td "Option")
                     (td (input (@ (type "text")
                                   (name "name"))))
                     (td (input (@ (type "submit")
                                   (value "+")))))))
            (div (@ (class "link"))
                 (h2 (a
                      (@ (href ,(string-append HOST "/poll/" poll)))
                      ,(string-append HOST
                                      "/poll/" poll)))))))))

(define (render-page-result poll)
  (let-values (((name desc) (poll-info poll)))
    (let* ((total (sql-vote-number-by-poll (list poll)))
           (fn (lambda (l)
                 (let* ((num (sql-vote-num-for-option
                              `(,(car l))))
                        (perc (percent num total))
                        (perc-str (string-append (number->string perc) "%")))
                   `((tr (td (div (@ (class ,(if (> perc 50)
                                                 "result-maj"
                                                 "result")))
                                  ,(substitute (cadr l) "&apos;" "'")))
                         (td ,num)
                         (td (div (@ (class ,(if (> perc 50)
                                                 "result-maj"
                                                 "result")))
                                  ,perc-str)))))))
           (pl (lambda (l)
                 (let* ((num (sql-vote-num-for-option
                              `(,(car l)))))
                   (/ (percent num total) 100.0))))
           (opts (sql-options-for-poll `(,poll)))
           (opts-sorted (list-sort (lambda (x y)
                                     (let ((num-x (sql-vote-num-for-option
                                                   `(,(car x))))
                                           (num-y (sql-vote-num-for-option
                                                   `(,(car y)))))
                                       (> num-x num-y)))
                                   opts))
           (opth (map fn opts-sorted))
           (percent-lst (map pl opts-sorted)))
      (sxml->html `((header (h1 ,name))
                    (div (@ (class "core"))
                         (div (@ (class "description"))
                              ,(commonmark->sxml desc))
                         (table
                          (@ (class "main"))
                          (tr
                           (td
                            (table
                             (tr
                              (th (em "Options"))
                              (th (em "Votes"))
                              (th (em "Results")))
                             ,opth))
                           (td
                            ,(make-pie-chart (remove zero?
                                                     percent-lst)))))))))))

(define (render-page-poll id)
  (let* ((fn (lambda (l)
               `(tr
                 (td (input (@ (type "radio")
                               (name "vote")
                               (value ,(car l)))
                            ,(substitute (cadr l) "&apos;" "'"))))))
         (poll (sql-poll-by-id `(,id)))
         (name (list-ref poll 0))
         (desc (list-ref poll 1))
         (opts (sql-options-for-poll `(,id)))
         (opth (map fn opts)))
    (sxml->html
     `((header (h1 ,name))
       (div (@ (class "core"))
            (div (@ (class "description"))
                 ,(commonmark->sxml desc))
            (form
             (@ (action
                 ,(string-append
                   "/result/" id))
                (method "post"))
             (table
              ,opth
              (tr
               (td (input (@ (type  "submit")
                             (value "Vote"))))))))))))

;;;
;;; Cookies !
;;;

(define (cookie-exists? cookies)
  (if (string? cookies)
      (let* ((split-point (string-split cookies #\;))
             (split-equal (map (lambda (s)
                                 (let ((l (string-split s #\=)))
                                   (car (acons (car l) (cadr l) '()))))
                               split-point))
             (str (assoc-ref split-equal "librepoll_auth")))
        (string? str))
      #f))

(define (cookie-auth cookies)
  (if (cookie-exists? cookies)
      (let* ((split-point (string-split cookies #\;))
             (split-equal (map (lambda (s)
                                 (let ((l (string-split s #\=)))
                                   (car (acons (car l) (cadr l) '()))))
                               split-point)))
        (assoc-ref split-equal "librepoll_auth"))
      (number->string (random-number))))

(define* (addon-headers cookies #:optional (cookie-value #f))
  (if (not (cookie-exists? cookies))
      `(set-cookie . ,(string-append "librepoll_auth="
                                     (if (string? cookie-value)
                                         cookie-value
                                         (cookie-auth cookies)) ";"
                                     "Max-Age=31536000"))
      '()))

(define* (xxx-headers xxx cookies #:optional (cookie-value #f))
  (let ((cookie (addon-headers cookies cookie-value)))
    (if (null? cookie)
        `((content-type . ,xxx))
        `((content-type . ,xxx)
          ,cookie))))

(define* (json-headers cookies #:optional (cookie-value #f))
  (xxx-headers '(application/json) cookies cookie-value))

(define* (html-headers cookies #:optional (cookie-value #f))
  (xxx-headers '(text/html) cookies cookie-value))

(define mime-type
  '(("jpeg" . (image/jpeg))
    ("jpg"  . (image/jpeg))
    ("png"  . (image/png))
    ("gif"  . (image/gif))
    ("css"  . (text/css))
    ("html" . (text/html))
    (#f     . (text/plain))))

(define (content-type file)
  (let* ((extention (car (last-pair (string-split file #\.))))
         (type (assoc-ref mime-type extention)))
    type))

;;;
;;; Handler
;;;

(define (ret-error path code message)
  (log (string-append "http: " code " - " message " - "
                      (cond
                       ((string? path) path)
                       ((list? path)   (string-join path "/"))
                       (else ""))))
  (values `((content-type . (text/html))
            (status . ,code))
          (sxml->html `(h1 ,(string-append
                             code " - " message)))))

(define-syntax-rule (define-handler-matcher name bool fun)
  "Define new function NAME coresponding to FUN if BOOL is true. Else
define function NAME who returns error."
  (define name
    (if bool
        fun
        (lambda (path request-body cookies)
          (ret-error path "404" "Not found")))))

(define-handler-matcher get-api
  API
  (lambda (path request-body cookies)
    (match path
      ;; api/v1/status
      (("api" "v1" "status")
       (values (json-headers cookies)
               (scm->json-string `(("status"  . "OK")
                                   ("license" . "AGPL")
                                   ("host"    . ,HOST)
                                   ("votes"   . ,(sql-vote-count))
                                   ("polls"   . ,(sql-poll-count))))))
      ;; api/v1/poll/:id
      (("api" "v1" "poll" id)
       (let* ((total (sql-vote-number-by-poll `(,id)))
              (fn (lambda (l)
                    (let* ((oid  (list-ref l 0))
                           (otxt (list-ref l 1))
                           (num  (sql-vote-num-for-option `(,oid))))
                      `(,oid ,(substitute otxt "&apos;" "'") ,num))))
              (poll (sql-poll-by-id `(,id)))
              (name (list-ref poll 0))
              (desc (list-ref poll 1))
              (opts (sql-options-for-poll `(,id)))
              (options (map fn opts)))
         (values (json-headers cookies)
                 (scm->json-string `(("name" . ,name)
                                     ("description" . ,(substitute
                                                        (substitute desc
                                                                    "&apos;"
                                                                    "'")
                                                        "\r" ""))
                                     ("options" . ,options))))))
      ;; api/v1/vote/:poll/:opt
      (("api" "v1" "vote" poll opt)
       (let* ((cookie (cookie-auth cookies))
              (vote (if (not (sql-vote-exist? `(,poll ,cookie)))
                        (sql-vote `(,poll ,opt ,cookie)))))
         (values (json-headers cookies)
                 (scm->json-string `(("status" . "Ok"))))))
      ;; Else
      (x
       (ret-error path "404" "Not found")))))

(define-handler-matcher post-api
  API
  (lambda (path request-body cookies)
    (match path
      ;; TODO: API v1 POST
      (x
       (ret-error path "404" "Not found")))))

(define-handler-matcher get-ui
  UI
  (lambda (path request-body cookies)
    (match path
      ;; /index.html or /
      ((or ("index.html")
           ("")
           ())
       (values (html-headers cookies)
               (render-page-index)))
      ;; /assets/:theme/:file
      (("assets" theme file)
       (let ((ct (content-type file))
             (fpath (string-append share-path "assets/" theme "/" file)))
         (if (file-exists? fpath)
             (values `((content-type . ,ct))
                     (file-content fpath))
             (ret-error fpath "404" "Not found"))))
      ;; /result/:poll-id
      (("result" poll)
       (values (html-headers cookies)
               (render-page-result poll)))
      ;; /poll/:poll-id
      (("poll" id)
       (values (html-headers cookies)
               (render-page-poll id)))
      ;; /create
      (("create")
       (values (html-headers cookies)
               (render-page-create-poll-get)))
      ;; Else
      (x
       (ret-error path "404" "Not found")))))

(define-handler-matcher post-ui
  UI
  (lambda (path request-body cookies)
    (match path
      ;; /vote/:poll-id
      (("result" poll)
       (let* ((body (decode-post-uri-body request-body))
              (id   (assoc-ref body "vote"))
              (cookie (cookie-auth cookies))
              (vote (if (not (sql-vote-exist? `(,poll ,cookie)))
                        (sql-vote `(,poll ,id ,cookie)))))
         (values (html-headers cookies cookie)
                 (render-page-result poll))))
      ;; /add_option/:poll-id
      (("add_option" poll)
       (let* ((body (decode-post-uri-body request-body))
              (name (assoc-ref body "name"))
              (sql-return (sql-create-option-for-poll `(,poll ,name)))
              (options (sql-options-for-poll `(,poll))))
         (values (html-headers cookies)
                 (render-page-add-option poll))))
      ;; /create
      (("create")
       (let* ((body (decode-post-uri-body request-body))
              (name (assoc-ref body "name"))
              (desc (assoc-ref body "description")))
         (if (string-null? name)
             (values (html-headers cookies)
                     (render-page-create-poll-get))
             (let* ((sql-return (sql-create-poll
                                 `(,name
                                   ,desc)))
                    (id (sql-poll-by-name `(,name))))
               (values (html-headers cookies)
                       (render-page-add-option (number->string id)))))))
      (x
       (ret-error path "404" "Not found")))))

(define (my-handler request request-body)
  (define request-path
    (uri-path (request-uri request)))

  (define cookies
    (assoc-ref (request-headers request) 'cookie))

  (log (format "http: ~a ~a"
               (request-method request)
               request-path))

  (catch #t
    (lambda ()
      (let ((path (remove string-null? (string-split request-path #\/))))
        (match (request-method request)
          ('GET
           (match path
             (("api" "v1" . rest)
              (get-api path request-body cookies))
             (x
              (get-ui path request-body cookies))))
          ('POST
           (match path
             (("api" "v1" . rest)
              (post-api path request-body cookies))
             (x
              (post-ui path request-body cookies))))
          (_
           (ret-error path "404" "Not found")))))
    (lambda (key . args)
      (log (format "error: ~a ~a" key args))
      (ret-error "" "500" "Internal server error"))))

;;;
;;; Run server
;;;

(log "server: Start")
(run-server my-handler 'http `(#:port ,PORT
                               #:addr ,INADDR_ANY))

;;; End of file
