#!@GUILE@ --no-auto-compile
-*- mode: scheme -*-
!#
;;; LibrePoll -- Free opinion poll service.
;;;
;;; Copyright (C) 2019 Pierre-Antoine Rouby <contact@parouby.fr>
;;;
;;; This program is free software: you can redistribute it and/or
;;; modify it under the terms of the GNU Affero General Public License
;;; as published by the Free Software Foundation, either version 3 of
;;; the License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; Affero General Public License for more details.
;;;
;;; You should have received a copy of the GNU Affero General Public
;;; License along with this program.  If not, see
;;; <http://www.gnu.org/licenses/>.

(use-modules (ice-9 match)
             (ice-9 regex)
             ((ice-9 format) #:prefix icef:)
             (srfi srfi-1)
             (srfi srfi-11)
             (srfi srfi-28)
             (srfi srfi-69)
             (rnrs sorting)
             ;; LibrePoll
             (librepoll options)
             (librepoll error)
             (librepoll tools)
             (librepoll chart)
             (librepoll sql)
             (librepoll sql-request)
             (librepoll create-db)
             (librepoll render)
             ;; Html & Markdown
             (sxml simple)
             (commonmark)
             ;; Web
             (rnrs bytevectors)
             (web request)
             (web server)
             (web uri)
             ;; DataBase
             (sqlite3)
             ;; Json
             (json))

;;;
;;; Usage
;;;

(define (using)
  (display (format "Usage: ~a [CONFIG]\n" (car (command-line))))
  (exit -1))

;;; Help
(if (or (string= "--help" (car (last-pair (command-line))))
        (string= "-h" (car (last-pair (command-line)))))
    (using))

;;;
;;; Configuration
;;;

(define config (get-options-ht
                (if (equal? (length (command-line)) 2)
                    (list-ref (command-line) 1)
                    "librepoll.json")))

;;;
;;; Log
;;;

(define log
  (let ((lfile
         (let ((port (open-output-file (hash-table-ref config 'log-file))))
           (lambda (message)
             (let ((lines (string-split message #\newline)))
               (map (lambda (msg)
                      (display
                       (format "~a librepoll: ~a\n"
                               (strftime "%b %d %H:%M:%S"
                                         (localtime (current-time)))
                               msg)
                       port))
                    lines))))))
    (if (hash-table-ref config 'stdout)
        (lambda (message)
          (display (format "~a\n" message))
          (lfile message))
        lfile)))

;;;
;;; DB file
;;;

(define default-db
  (let* ((file (hash-table-ref config 'db-file))
         (db   (sqlite-open  file)))
    (cond
     ((file-exists? file) db)
     (else
      (let ((ok (create-db db file)))
        db)))))

;;;
;;; Cookies !
;;;

(define (cookie-exists? cookies)
  (if (string? cookies)
      (let* ((split-point (string-split cookies #\;))
             (split-equal (map (lambda (s)
                                 (let ((l (string-split s #\=)))
                                   (car (acons (car l) (cadr l) '()))))
                               split-point))
             (str (assoc-ref split-equal "librepoll_auth")))
        (string? str))
      #f))

(define (cookie-auth cookies)
  (if (cookie-exists? cookies)
      (let* ((split-point (string-split cookies #\;))
             (split-equal (map (lambda (s)
                                 (let ((l (string-split s #\=)))
                                   (car (acons (car l) (cadr l) '()))))
                               split-point)))
        (assoc-ref split-equal "librepoll_auth"))
      (number->string (random-number))))

(define* (addon-headers cookies #:optional (cookie-value #f))
  (if (not (cookie-exists? cookies))
      `(set-cookie . ,(string-append "librepoll_auth="
                                     (if (string? cookie-value)
                                         cookie-value
                                         (cookie-auth cookies)) ";"
                                     "Max-Age=31536000"))
      '()))

(define* (xxx-headers xxx cookies #:optional (cookie-value #f))
  (let ((cookie (addon-headers cookies cookie-value)))
    (if (null? cookie)
        `((content-type . ,xxx))
        `((content-type . ,xxx)
          ,cookie))))

(define* (json-headers cookies #:optional (cookie-value #f))
  (xxx-headers '(application/json) cookies cookie-value))

(define* (html-headers cookies #:optional (cookie-value #f))
  (xxx-headers '(text/html) cookies cookie-value))

(define mime-type
  '(("jpeg" . (image/jpeg))
    ("jpg"  . (image/jpeg))
    ("png"  . (image/png))
    ("gif"  . (image/gif))
    ("css"  . (text/css))
    ("html" . (text/html))
    (#f     . (text/plain))))

(define (content-type file)
  (let* ((extention (car (last-pair (string-split file #\.))))
         (type (assoc-ref mime-type extention)))
    type))

;;;
;;; Handler
;;;

(define (ret-error path code message)
  (log (string-append "http: " code " - " message " - "
                      (cond
                       ((string? path) path)
                       ((list? path)   (string-join path "/"))
                       (else ""))))
  (values `((content-type . (text/html))
            (status . ,code))
          (sxml->html config `(h1 ,(string-append
                                    code " - " message)))))

(define-syntax-rule (define-handler-matcher name bool fun)
  "Define new function NAME coresponding to FUN if BOOL is true. Else
define function NAME who returns error."
  (define name
    (if bool
        fun
        (lambda (path request-body cookies)
          (ret-error path "404" "Not found")))))

(define-handler-matcher get-api
  (hash-table-ref config 'api)
  (lambda (path request-body cookies)
    (match path
      ;; api/v1/status
      (("api" "v1" "status")
       (values (json-headers cookies)
               (scm->json-string `(("status"  . "OK")
                                   ("license" . "AGPL")
                                   ("host"    . ,(hash-table-ref config 'host))
                                   ("votes"   . ,(sql-vote-count default-db))
                                   ("polls"   . ,(sql-poll-count default-db))))))
      ;; api/v1/poll/:id
      (("api" "v1" "poll" id)
       (let* ((total (sql-vote-number-by-poll default-db `(,id)))
              (fn (lambda (l)
                    (let* ((oid  (list-ref l 0))
                           (otxt (list-ref l 1))
                           (num  (sql-vote-num-for-option default-db (list oid))))
                      `(,oid ,(substitute otxt "&apos;" "'") ,num))))
              (poll (sql-poll-by-id default-db (list id)))
              (name (list-ref poll 0))
              (desc (list-ref poll 1))
              (opts (sql-options-for-poll default-db (list id)))
              (options (map fn opts)))
         (values (json-headers cookies)
                 (scm->json-string `(("name" . ,name)
                                     ("description" . ,(substitute
                                                        (substitute desc
                                                                    "&apos;"
                                                                    "'")
                                                        "\r" ""))
                                     ("options" . ,options))))))
      ;; api/v1/vote/:poll/:opt
      (("api" "v1" "vote" poll opt)
       (let* ((cookie (cookie-auth cookies))
              (vote (if (not (sql-vote-exist? default-db (list poll cookie)))
                        (sql-vote default-db (list poll opt cookie)))))
         (values (json-headers cookies)
                 (scm->json-string `(("status" . "Ok"))))))
      ;; Else
      (x
       (ret-error path "404" "Not found")))))

(define-handler-matcher post-api
  (hash-table-ref config 'api)
  (lambda (path request-body cookies)
    (match path
      ;; TODO: API v1 POST
      (x
       (ret-error path "404" "Not found")))))

(define-handler-matcher get-ui
  (hash-table-ref config 'ui)
  (lambda (path request-body cookies)
    (match path
      ;; /index.html or /
      ((or ("index.html")
           ("")
           ())
       (values (html-headers cookies)
               (render-page-index config default-db)))
      ;; /assets/:theme/:file
      (("assets" theme file)
       (let ((ct (content-type file))
             (fpath (string-append share-path "assets/" theme "/" file)))
         (if (file-exists? fpath)
             (values `((content-type . ,ct))
                     (file-content fpath))
             (ret-error fpath "404" "Not found"))))
      ;; /result/:poll-id
      (("result" poll)
       (values (html-headers cookies)
               (render-page-result poll config default-db)))
      ;; /poll/:poll-id
      (("poll" id)
       (values (html-headers cookies)
               (render-page-poll id config default-db)))
      ;; /create
      (("create")
       (values (html-headers cookies)
               (render-page-create-poll-get config default-db)))
      ;; Else
      (x
       (ret-error path "404" "Not found")))))

(define-handler-matcher post-ui
  (hash-table-ref config 'ui)
  (lambda (path request-body cookies)
    (match path
      ;; /vote/:poll-id
      (("result" poll)
       (let* ((body (decode-post-uri-body request-body))
              (id   (assoc-ref body "vote"))
              (cookie (cookie-auth cookies))
              (vote (if (not (sql-vote-exist? default-db (list poll cookie)))
                        (sql-vote default-db (list poll id cookie)))))
         (values (html-headers cookies cookie)
                 (render-page-result poll config default-db))))
      ;; /add_option/:poll-id
      (("add_option" poll)
       (let* ((body (decode-post-uri-body request-body))
              (name (assoc-ref body "name"))
              (sql-return (sql-create-option-for-poll default-db (list poll name)))
              (options (sql-options-for-poll default-db (list poll))))
         (values (html-headers cookies)
                 (render-page-add-option poll config default-db))))
      ;; /create
      (("create")
       (let* ((body (decode-post-uri-body request-body))
              (name (assoc-ref body "name"))
              (desc (assoc-ref body "description")))
         (if (string-null? name)
             (values (html-headers cookies)
                     (render-page-create-poll-get config default-db))
             (let* ((sql-return (sql-create-poll default-db
                                                 (list name desc)))
                    (id (sql-poll-by-name default-db (list name))))
               (values (html-headers cookies)
                       (render-page-add-option (number->string id)
                                               config default-db))))))
      (x
       (ret-error path "404" "Not found")))))

(define (my-handler request request-body)
  (define request-path
    (uri-path (request-uri request)))

  (define cookies
    (assoc-ref (request-headers request) 'cookie))

  (log (format "http: ~a ~a"
               (request-method request)
               request-path))

  (catch #t
    (lambda ()
      (let ((path (remove string-null? (string-split request-path #\/))))
        (match (request-method request)
          ('GET
           (match path
             (("api" "v1" . rest)
              (get-api path request-body cookies))
             (x
              (get-ui path request-body cookies))))
          ('POST
           (match path
             (("api" "v1" . rest)
              (post-api path request-body cookies))
             (x
              (post-ui path request-body cookies))))
          (_
           (ret-error path "404" "Not found")))))
    (lambda (key . args)
      (log (format "error: ~a ~a" key args))
      (ret-error "" "500" "Internal server error"))))

;;;
;;; Run server
;;;

(log "server: Start")
(run-server my-handler 'http `(#:port ,(hash-table-ref config 'port)
                               #:addr ,INADDR_ANY))

;;; End of file
